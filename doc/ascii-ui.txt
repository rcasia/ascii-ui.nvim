ascii-ui.Buffer                                                *ascii-ui.Buffer*

    Fields: ~
        {lines}  (ascii-ui.BufferLine[])


Buffer:new()                                                        *Buffer:new*
    @param ...? ascii-ui.BufferLine

    Returns: ~
        (ascii-ui.Buffer)


Buffer:find_focusable()                                  *Buffer:find_focusable*

    Returns: ~
        (ascii-ui.Element|nil)


Buffer:iter_focusables()                                *Buffer:iter_focusables*

    Returns: ~
        (fun():ascii-ui.Element|nil)


Buffer.from_lines({lines})                                   *Buffer.from_lines*

    Parameters: ~
        {lines}  (string[])

    Returns: ~
        (ascii-ui.Buffer)


Buffer:to_lines()                                              *Buffer:to_lines*

    Returns: ~
        (string[])


Buffer:find_element_by_id({id})                      *Buffer:find_element_by_id*

    Parameters: ~
        {id}  (string)

    Returns: ~
        (ascii-ui.Element|nil)


                                               *Buffer:find_element_by_position*
Buffer:find_element_by_position({position})

    Parameters: ~
        {position}  ({line:integer,col:integer})

    Returns: ~
        (ascii-ui.Element|nil)


ascii-ui.BufferLine                                        *ascii-ui.BufferLine*

    Fields: ~
        {elements}  (ascii-ui.Element[])


BufferLine.new({...})                                           *BufferLine.new*

    Parameters: ~
        {...}  (ascii-ui.Element)

    Returns: ~
        (ascii-ui.BufferLine)


BufferLine:find_focusable()                          *BufferLine:find_focusable*

    Returns: ~
        (ascii-ui.Element|nil)
        ({col:number}|nil)


BufferLine:find_element_by_col({col})           *BufferLine:find_element_by_col*

    Parameters: ~
        {col}  (number)

    Returns: ~
        (ascii-ui.Element|nil)


BufferLine.from_string({str})                           *BufferLine.from_string*

    Parameters: ~
        {str}  (string)


BufferLine:to_string()                                    *BufferLine:to_string*

    Returns: ~
        (string)


ascii-ui.Element                                              *ascii-ui.Element*


Element:new({text}, {is_focusable?})                               *Element:new*

    Parameters: ~
        {text}           (string)
        {is_focusable?}  (boolean)

    Returns: ~
        (ascii-ui.Element)


Element:len()                                                      *Element:len*

    Returns: ~
        (integer)


Element:to_string()                                          *Element:to_string*


Element:is_focusable()                                    *Element:is_focusable*


ascii-ui.BoxProps                                            *ascii-ui.BoxProps*

    Type: ~
        {width:integer,height:integer}


ascii-ui.Box : ascii-ui.Component                                 *ascii-ui.Box*

    Fields: ~
        {props}  (ascii-ui.BoxProps)


Box:new({props?})                                                      *Box:new*

    Parameters: ~
        {props?}  (ascii-ui.BoxProps)

    Returns: ~
        (ascii-ui.Box)


Box:set_child({child})                                           *Box:set_child*

    Parameters: ~
        {child}  (string)


Box:child()                                                          *Box:child*

    Returns: ~
        (string)


Box:has_child()                                                  *Box:has_child*

    Returns: ~
        (boolean)


ascii-ui.Checkbox : ascii-ui.Component                       *ascii-ui.Checkbox*

    Fields: ~
        {checked}  (boolean)
        {label}    (string)


Checkbox:new({opts?})                                             *Checkbox:new*

    Parameters: ~
        {opts?}  ({checked?:boolean,label?:string})

    Returns: ~
        (ascii-ui.Checkbox)


Checkbox:toggle()                                              *Checkbox:toggle*


Checkbox:is_checked()                                      *Checkbox:is_checked*


Checkbox:render()                                              *Checkbox:render*

    Returns: ~
        (ascii-ui.BufferLine[])


ascii-ui.Component                                          *ascii-ui.Component*

    Fields: ~
        {render}  (fun():ascii-ui.BufferLine[])


Component:new()                                                  *Component:new*
     @return ascii-ui.Component


Component:extend()                                            *Component:extend*
     @generic T
     @param custom_component T
     @param props? table<string, any>
     @return T


Component:subscribe()                                      *Component:subscribe*
     @param cb fun(component: table, key: string, value: any)


Component:clear_subscriptions()                  *Component:clear_subscriptions*


ascii-ui.OptionsOpts                                      *ascii-ui.OptionsOpts*

    Type: ~
        {options:string[]}


ascii-ui.Options.Item                                    *ascii-ui.Options.Item*

    Fields: ~
        {id}    (integer)
        {name}  (string)


ascii-ui.Options : ascii-ui.Component                         *ascii-ui.Options*

    Fields: ~
        {options}          (ascii-ui.Options.Item[])
        {_index_selected}  (integer)


Options:new({opts})                                                *Options:new*

    Parameters: ~
        {opts}  (ascii-ui.OptionsOpts)

    Returns: ~
        (ascii-ui.Options)


Options:select_index({index})                             *Options:select_index*

    Parameters: ~
        {index}  (integer)

    Returns: ~
        (string)  selected_option


Options:select_next()                                      *Options:select_next*

    Returns: ~
        (string)  selected_option


Options:render()                                                *Options:render*

    Returns: ~
        (ascii-ui.BufferLine[])


ascii-ui.TextInput : ascii-ui.Component                     *ascii-ui.TextInput*

    Fields: ~
        {content}  (string)


TextInput:new()                                                  *TextInput:new*

    Returns: ~
        (ascii-ui.TextInput)


M.render({component})                                                 *M.render*

    Parameters: ~
        {component}  (ascii-ui.Component)

    Returns: ~
        (integer)  bufnr


ascii-ui.Renderer                                            *ascii-ui.Renderer*


Renderer:new()                                                    *Renderer:new*
     bottom_left: string, bottom_right: string, horizontal: string, vertical: string } }
     @return ascii-ui.Renderer


Renderer:render({component})                                   *Renderer:render*

    Parameters: ~
        {component}  (ascii-ui.Component)

    Returns: ~
        (ascii-ui.Buffer)


Renderer:render_box({box})                                 *Renderer:render_box*

    Parameters: ~
        {box}  (ascii-ui.Box)


ascii-ui.WindowOpts                                        *ascii-ui.WindowOpts*

    Type: ~
        {width?:integer,height?:integer}


ascii-ui.Window                                                *ascii-ui.Window*

    Fields: ~
        {winid}  (integer)
        {bufnr}  (integer)
        {opts}   (ascii-ui.WindowOpts)


Window:new({opts?})                                                 *Window:new*

    Parameters: ~
        {opts?}  (ascii-ui.WindowOpts)

    Returns: ~
        (ascii-ui.Window)


Window:open()                                                      *Window:open*


Window:is_open()                                                *Window:is_open*

    Returns: ~
        (boolean)


Window:close()                                                    *Window:close*


Window:update({buffer_content})                                  *Window:update*

    Parameters: ~
        {buffer_content}  (string[])


vim:tw=78:ts=8:noet:ft=help:norl:
